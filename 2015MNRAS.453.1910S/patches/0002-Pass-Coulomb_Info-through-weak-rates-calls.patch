From 1aaf78aba9be27aad3b43a7f328fdc88e65be3e4 Mon Sep 17 00:00:00 2001
From: Josiah Schwab <jschwab@gmail.com>
Date: Mon, 7 Jul 2014 14:08:03 -0700
Subject: [PATCH 02/12] Pass Coulomb_Info through weak rates calls

When the routines that evaluate the weak reactions are called, they need
to pass down a filled Coulomb_Info structure.  This changes the call
signatures of the functions to allow this information to be passed down.

Right now, it is only fed into the ecapture routines.  But if future
users want to evaluate coulomb corrections on the fly for the regular
weaklib reactions, it will be straightforward.

This refactors the existing routine that calculated the coulomb
corrections to use the new Coulomb_Info structure.  It also paves the
way for multiple implementations of the corrections.
---
 rates/private/eval_coulomb.f   | 58 ++++++++++++++++++++++++++++++++----------
 rates/private/eval_ecapture.f  | 12 +++++----
 rates/public/rates_lib.f       | 40 +++++++++++++++++++++++++----
 rates/test/src/test_ecapture.f | 44 ++++++++++++++++++++++++++------
 rates/test/src/test_weak.f     |  4 ++-
 rates/test/test_output         |  2 +-
 6 files changed, 126 insertions(+), 34 deletions(-)

diff --git a/rates/private/eval_coulomb.f b/rates/private/eval_coulomb.f
index 12c3415..1b2a7b9 100644
--- a/rates/private/eval_coulomb.f
+++ b/rates/private/eval_coulomb.f
@@ -30,25 +30,51 @@ module mod_eval_coulomb
 
   implicit none
 
+  ! will add other approaches in the future
+  integer, parameter :: DGC1973 = 1
+  integer :: which_mui_coulomb = 1
+
 contains
 
 #ifdef use_mic
-      !dir$ attributes offload: mic :: do_mu_coulomb
+      !dir$ attributes offload: mic :: do_mui_coulomb
 #endif
-  function do_mu_coulomb(z, rhoye, T, zbar) result(mu)
+  function do_mui_coulomb(cc, Z) result(mu)
+
+    use rates_def, only: Coulomb_Info
+
+    implicit none
+
+    type(Coulomb_Info), intent(in) :: cc
+    real(dp), intent(in) :: Z ! nuclear charge
+
+    real(dp) :: mu ! the chemical potential in units of kT
+
+    select case (which_mui_coulomb)
+    case (DGC1973)
+       mu = mui_coulomb_DGC1973(cc, Z)
+    case default
+       stop "STOP (eval_coulomb.f: do_mui_coulomb): incorrect value of which_mui_coulomb"
+    end select
+
+    return
+
+  end function do_mui_coulomb
+
+
+  function mui_coulomb_DGC1973(cc, Z) result(mu)
     use crlibm_lib
-    
-    ! calulate the chemi
+    use rates_def, only: Coulomb_Info
 
     implicit none
 
-    real(dp), intent(in) :: z     ! nuclear charge
-    real(dp), intent(in) :: T     ! temperature
-    real(dp), intent(in) :: rhoye ! density * electron fraction
-    real(dp), intent(in) :: zbar  ! average nuclear charge
+    type(Coulomb_Info), intent(in) :: cc
+    real(dp), intent(in) :: Z ! nuclear charge
 
     real(dp) :: mu ! the chemical potential in units of kT
 
+    ! calulate the chemical potential of an ion
+
     real(dp) :: gamma
     real(dp) :: zr, zr_m1o3
 
@@ -61,15 +87,19 @@ contains
 
     logical :: debug = .false.
 
-    ! expressions taken from Couch & Loumos (1974)
-    ! ApJ, vol. 194, Dec. 1, 1974, pt. 1, p. 385-392
+    ! from Dewitt, H. E., Graboske, H. C., & Cooper, M. S. 1973, ApJ, 181, 439
+    ! via Couch & Loumos ApJ, vol. 194, Dec. 1, 1974, pt. 1, p. 385-392
 
     ! coulomb coupling parameter
-    gamma = 2.275e5_dp * pow_cr(z,2d0/3d0) * zbar * pow_cr(rhoye,1d0/3d0) / T
-    if (debug) write(*,'(a,3(ES12.3))') "gamma = ", gamma, rhoYe, T
+    gamma = 2.275e5_dp * pow_cr(Z,2d0/3d0) * cc% zbar * pow_cr(cc% den * cc% ye, 1d0/3d0) * cc% tempi
+    if (debug) write(*,'(a,4(ES12.3))') "gamma = ", gamma, cc% den, cc% ye, cc% temp
+
+    ! it appears that Gutierrez et al. use something like
+    ! despite citing the above references
+    ! gamma = pow_cr(cc% zbar,5d0/3d0) * cc% gamma_e
 
     ! ratios for convenience
-    zr = z/zbar
+    zr = Z/cc% zbar
     zr_m1o3 = pow_cr(zr,-1d0/3d0) ! zr to the minus 1/3 power
 
     ! evaluate mu(Z); C&L eq. (11)
@@ -78,6 +108,6 @@ contains
 
     return
 
-  end function do_mu_coulomb
+  end function mui_coulomb_DGC1973
 
 end module mod_eval_coulomb
diff --git a/rates/private/eval_ecapture.f b/rates/private/eval_ecapture.f
index 54070b6..5795ec8 100644
--- a/rates/private/eval_ecapture.f
+++ b/rates/private/eval_ecapture.f
@@ -38,7 +38,7 @@ contains
       !dir$ attributes offload: mic :: do_eval_ecapture_reaction_info
 #endif
   subroutine do_eval_ecapture_reaction_info( &
-       n, ids, T9, YeRho, zbar, &
+       n, ids, cc, T9, YeRho, zbar, &
        etak, d_etak_dlnT, d_etak_dlnRho, &  ! these are kinetic chemical potentials
        ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
        lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
@@ -47,6 +47,7 @@ contains
        Q, dQ_dlnT, dQ_dlnRho, &
        Qneu, dQneu_dlnT, dQneu_dlnRho, &
        ierr)
+    use rates_def, only: Coulomb_Info
     use mod_eval_psi
     use mod_eval_coulomb
     use const_def, only: ln10, kerg, mev_to_ergs, keV, me, clight, ev2erg, fine
@@ -56,6 +57,7 @@ contains
       integer_dict_lookup, integer_dict_size
 
     integer, intent(in) :: n, ids(:)
+    type(Coulomb_Info), intent(in) :: cc
     real(dp), intent(in) :: T9, YeRho, zbar, etak, d_etak_dlnT, d_etak_dlnRho
     real(dp), dimension(:), intent(out), pointer :: &
          ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
@@ -249,11 +251,11 @@ contains
        ! get chemical potential difference, related to coulomb correction
        if (do_ecapture_coulomb) then
 
-          ! get chemical potentials (already in units of kT)
-          muC_lhs = do_mu_coulomb(Z_lhs, YeRho, 1e9_dp * T9, zbar)
-          muC_rhs = do_mu_coulomb(Z_rhs, YeRho, 1e9_dp * T9, zbar)
+          ! get ion chemical potentials (already in units of kT)
+          muC_lhs = do_mui_coulomb(cc, Z_lhs)
+          muC_rhs = do_mui_coulomb(cc, Z_rhs)
 
-          ! shift is negative (for e-capture) given our definitions
+          ! shift should be negative (for e-capture) given our definitions
           delta_muC = muC_lhs - muC_rhs
 
           if (dbg) write(*,*) eta, muC_lhs, muC_rhs, delta_muC
diff --git a/rates/public/rates_lib.f b/rates/public/rates_lib.f
index a809551..f30c39a 100644
--- a/rates/public/rates_lib.f
+++ b/rates/public/rates_lib.f
@@ -763,7 +763,7 @@
       !dir$ attributes offload: mic :: eval_ecapture_reaction_info
 #endif         
       subroutine eval_ecapture_reaction_info( &
-             n, ids, T9, YeRho, zbar, &
+             n, ids, cc, T9, YeRho, zbar, &
              eta, d_eta_dlnT, d_eta_dlnRho, &
              ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
              lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
@@ -772,8 +772,10 @@
              Q, dQ_dlnT, dQ_dlnRho, &
              Qneu, dQneu_dlnT, dQneu_dlnRho, &
              ierr)
+         use rates_def, only: Coulomb_Info
          use mod_eval_ecapture, only: do_eval_ecapture_reaction_info
          integer, intent(in) :: n, ids(:) 
+         type(Coulomb_Info), intent(in) :: cc
          real(dp), intent(in) :: T9, YeRho, zbar, eta, d_eta_dlnT, d_eta_dlnRho
          ! lambda = combined rate = 10**ldecay + 10**lcapture
          ! Q and Qneu are for combined rate of beta decay and electron capture.
@@ -789,7 +791,7 @@
                 Qneu, dQneu_dlnT, dQneu_dlnRho
          integer, intent(out) :: ierr
          call do_eval_ecapture_reaction_info( &
-                n, ids, T9, YeRho, zbar, &
+                n, ids, cc, T9, YeRho, zbar, &
                 eta, d_eta_dlnT, d_eta_dlnRho, &
                 ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
                 lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
@@ -832,7 +834,7 @@
       !dir$ attributes offload: mic :: eval_weak_reaction_info
 #endif         
 		subroutine eval_weak_reaction_info( &
-		      n, ids, T9, YeRho, zbar, &
+		      n, ids, cc, T9, YeRho, zbar, &
 		      eta, d_eta_dlnT, d_eta_dlnRho, &
 		      ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
 		      lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
@@ -841,9 +843,11 @@
 		      Q, dQ_dlnT, dQ_dlnRho, &
 		      Qneu, dQneu_dlnT, dQneu_dlnRho, &
 		      ierr)
+           use rates_def, only: Coulomb_Info
 		   use mod_eval_weak, only: do_eval_weak_reaction_info
-         use rates_def_mic, only : do_ecapture
+           use rates_def_mic, only : do_ecapture
 		   integer, intent(in) :: n, ids(:)
+           type(Coulomb_Info), pointer :: cc
 		   real(dp), intent(in) :: T9, YeRho, zbar, eta, d_eta_dlnT, d_eta_dlnRho
 		   ! lambda = combined rate = 10**ldecay + 10**lcapture
 		   ! Q and Qneu are for combined rate of beta decay and electron capture.
@@ -872,7 +876,7 @@
          if (.not. do_ecapture) return 
          if (zbar <= 0) return 
          call eval_ecapture_reaction_info( &
-             n, ids, T9, YeRho, zbar, &
+             n, ids, cc, T9, YeRho, zbar, &
              eta, d_eta_dlnT, d_eta_dlnRho, &
              ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
              lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
@@ -1060,4 +1064,30 @@
          call n14_electron_capture_rate(T,Rho,UE,rate)
       end subroutine eval_n14_electron_capture_rate      
 
+
+#ifdef use_mic
+      !dir$ attributes offload: mic :: coulomb_set_context
+#endif         
+      ! call this once before calling eval_ecapture
+      ! sets info that depends only on temp, den, and overall composition         
+      subroutine coulomb_set_context( &
+            cc, temp, den, logT, logRho, zbar, abar, z2bar,  &
+            theta_e, num_isos, y, iso_z)
+         use rates_def_mic
+         use rates_def, only: Coulomb_Info
+         use coulomb, only: do_coulomb_set_context
+         type (Coulomb_Info), pointer :: cc
+         integer, intent(in) :: num_isos
+         real(dp), intent(in) ::  &
+               temp, den, logT, logRho, zbar, abar, z2bar, y(:), iso_z(:)
+            ! y(:) = x(:)/chem_A(chem_id(:))
+            ! iso_z(:) = chem_Z(chem_id(:))
+         real(dp) :: theta_e
+            ! for non-degenerate electrons, theta_e goes to 1.
+            ! for significantly degenerate electrons, it goes to 0.
+         call do_coulomb_set_context( &
+            cc, temp, den, logT, logRho, zbar, abar, z2bar, &
+            theta_e, num_isos, y, iso_z)
+      end subroutine coulomb_set_context
+
       end module rates_lib
diff --git a/rates/test/src/test_ecapture.f b/rates/test/src/test_ecapture.f
index bcf0c5a..05ef1a7 100644
--- a/rates/test/src/test_ecapture.f
+++ b/rates/test/src/test_ecapture.f
@@ -185,22 +185,47 @@
       subroutine do_test_coulomb
 
          use mod_eval_coulomb
+         use rates_def, only: Coulomb_Info
 
          real(dp) :: mu1, mu2
-         real(dp) :: z1, z2, rhoye, T
-         
+         real(dp) :: z1, z2
+         real(dp) :: log10T, T, log10Rho, Rho, abar, zbar, z2bar
+         real(dp) :: tmp
+         type(Coulomb_Info), pointer :: cc
+         real(dp), dimension(3) :: a, x, y, z
+         integer :: i
+
          include 'formats'
 
-         rhoye = exp10_cr(9.3d0)
-         T = exp10_cr(8.5d0)
+         log10Rho = 9.5
+         Rho = exp10_cr(log10Rho)
+         log10T = 8.5
+         T = exp10_cr(log10T)
 
          z1 = 12
          z2 = 11
 
          zbar = 9.5
 
-         mu1 = do_mu_coulomb(z1, rhoye, T, zbar)
-         mu2 = do_mu_coulomb(z2, rhoye, T, zbar)
+         allocate(cc)
+
+         a = (/16d0, 20d0, 24d0/)
+         z = (/8d0, 10d0, 12d0/)
+         x = (/0.8d0, 0.15d0, 0.05d0/)
+
+         y = x/a
+         
+         abar = 1d0 / sum(y)
+         zbar = sum(z*y)*abar
+         z2bar = sum(z*z*y)*abar
+
+         call coulomb_set_context(cc, T, Rho, log10T, log10Rho, & 
+              zbar, abar, z2bar, 0d0, 3, y, z)
+
+         mu1 = do_mui_coulomb(cc, z1)
+         mu2 = do_mui_coulomb(cc, z2)
+
+         deallocate(cc)
 
          write(*,1) 'do_test_coulomb', mu1, mu2, abs(mu1-mu2) * (8.617d-11) * T
 
@@ -215,6 +240,7 @@
          use eos_lib
          use chem_def
          use chem_lib
+         use rates_def, only: Coulomb_Info
 
          real(dp) :: Rho, T, Pgas, log10Rho, log10T
          real(dp) :: dlnRho_dlnPgas_const_T, dlnRho_dlnT_const_Pgas, d_dlnRho_const_T, d_dlnT_const_Rho
@@ -223,6 +249,8 @@
 
          integer :: i, ir, nr
          integer, pointer :: ids(:)
+         type(Coulomb_Info), pointer :: cc
+
          real(dp), dimension(:), pointer :: &
                 ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
                 lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
@@ -350,7 +378,7 @@
                   ec_lambda = 1
                   if (do_ecapture) then
                       call eval_ecapture_reaction_info( &
-                              nr, ids, T9, YeRho, zbar, &
+                              nr, ids, cc, T9, YeRho, zbar, &
                               eta, d_eta_dlnT, d_eta_dlnRho, &
                               ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
                               lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
@@ -361,7 +389,7 @@
                               ierr)
                   else
                       call eval_weak_reaction_info( &
-                              nr, ids, T9, YeRho, -1d0, &
+                              nr, ids, cc, T9, YeRho, -1d0, &
                               eta, d_eta_dlnT, d_eta_dlnRho, &
                               ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
                               lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
diff --git a/rates/test/src/test_weak.f b/rates/test/src/test_weak.f
index c5599f4..d31bbe8 100644
--- a/rates/test/src/test_weak.f
+++ b/rates/test/src/test_weak.f
@@ -12,8 +12,10 @@
          use const_lib
          use chem_lib
          use chem_def, only: iso_name_length, chem_isos
+         use rates_def, only: Coulomb_Info
          integer :: ierr, i, ir, nr
          integer, pointer :: ids(:)
+         type(Coulomb_Info), pointer :: cc
          double precision, dimension(:), pointer :: &
 		      ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
 		      lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
@@ -118,7 +120,7 @@
          write(*,*)
          
          call eval_weak_reaction_info( &
-            nr, ids, T9, YeRho, -1d0, &
+            nr, ids, cc, T9, YeRho, -1d0, &
 		      eta, d_eta_dlnT, d_eta_dlnRho, &
 		      ldecay, d_ldecay_dT9, d_ldecay_dlYeRho, &
 		      lcapture, d_lcapture_dT9, d_lcapture_dlYeRho, &
diff --git a/rates/test/test_output b/rates/test/test_output
index 4c0ee5e..6bce8f7 100644
--- a/rates/test/test_output
+++ b/rates/test/test_output
@@ -321,7 +321,7 @@
                                                dJ_lnRho   -2.5397575290037014D-05   -2.5568160594612932D-05    9.9332821366070978D-01
                                                 dI_dlnT    2.2501186547048283D-05    2.2501335004339001D-05    9.9999340228965572D-01
                                                 dJ_dlnT    1.2616049392764916D-06    1.2616165290441114D-06    9.9999081355756447D-01
-                                        do_test_coulomb   -6.3446160505528105D+01   -5.5132250408350636D+01    2.2654861781986410D-01
+                                        do_test_coulomb   -5.8283567975662045D+01   -5.0642757629817289D+01    2.0820708940099292D-01
 
  do_test_rates           1
                                                    logT    9.0000000000000000D+00
-- 
2.5.0

